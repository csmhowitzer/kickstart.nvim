--return {}
--arm64 is the M1 chip; which this machine has
--not needed for laptop, maybe make this a choice?
return {
  -- {
  --   'Cliffback/netcoredbg-macOS-arm64.nvim',
  --   dependencies = {
  --     'mfussenegger/nvim-dap',
  --     'rcarriga/nvim-dap-ui',
  --     'theHamsta/nvim-dap-virtual-text',
  --     'nvim-neotest/nvim-nio',
  --     'williamboman/mason.nvim',
  --   },
  --
  --   config = function()
  --     local dap = require 'dap'
  --     local coreclr = vim.fn.exepath 'netcoredbg'
  --     local dotnet = vim.fn.exepath 'dotnet'
  --
  --     local workspace = ''
  --     local currentNetVer = ''
  --     local projName = ''
  --
  --     local getProjName = function()
  --       if projName == '' then
  --         projName = vim.fn.input 'Startup ProjName: '
  --         return projName
  --       else
  --         return projName
  --       end
  --     end
  --     local getWorkspace = function()
  --       if workspace == '' then
  --         workspace = vim.fn.input('Workspace: ', vim.fn.getcwd() .. '/', 'file')
  --         return workspace
  --       else
  --         return workspace
  --       end
  --     end
  --     local getNetVer = function()
  --       currentNetVer = 'net8.0'
  --       return currentNetVer
  --     end
  --     local getDLLPath = function()
  --       if workspace == '' then
  --         getWorkspace()
  --       end
  --       if currentNetVer == '' then
  --         getNetVer()
  --       end
  --       if projName == '' then
  --         getProjName()
  --       end
  --       return workspace .. 'bin/Debug/' .. currentNetVer .. '/' .. projName .. '.dll'
  --     end
  --
  --     if coreclr ~= '' and dotnet ~= '' then
  --       dap.adapters.coreclr = {
  --         type = 'executable',
  --         command = coreclr,
  --         args = { '--interpreter=vscode' },
  --       }
  --       dap.configurations.cs = {
  --         {
  --           type = 'coreclr',
  --           justMyCode = false,
  --           stopatEntry = false,
  --           name = 'launch - netcoredbg',
  --           request = 'launch',
  --           --this may be needed for api type of configuration
  --           --args = { '/p:EnvironmentName=Development', '--urls=http://localhost:5004', '--environment=Development' },
  --           program = function()
  --             return getDLLPath()
  --           end,
  --           env = {
  --             ASPNETCORE_ENVIRONMENT = function()
  --               return 'Development'
  --             end,
  --           },
  --           cwd = function()
  --             return getWorkspace()
  --           end,
  --         },
  --         --   {
  --         --     type = 'coreclr',
  --         --     --justMycode = false,
  --         --     stopAtEntry = false,
  --         --     name = 'launch - netcoredbg - test',
  --         --     preLaunchTask = 'build',
  --         --     request = 'attach',
  --         --     program = '/usr/local/share/dotnet/dotnet',
  --         --     processId = function()
  --         --       return vim.fn.input 'Project Id: '
  --         --     end,
  --         --     cwd = getWorkspace(),
  --         --     args = {
  --         --       'exec',
  --         --       '--runtimeconfig',
  --         --       getWorkspace() .. 'bin/Debug/' .. getNetVer() .. '/' .. getProjName() .. '.runtimeconfig.json',
  --         --       '--additionalprobingpath',
  --         --       '/Users/wwmac/.nuget/packages',
  --         --       '/Users/wwmac/.nuget/packages/dotnet-xunit/2.3.1/lib/netcoreapp2.0/dotnet-xunit.dll',
  --         --       getDLLPath(),
  --         --       '-namespace',
  --         --       getProjName(),
  --         --     },
  --         --     env = {},
  --         --     --console = 'true',
  --         --   },
  --       }
  --     else
  --       print "couldn't find executable"
  --     end
  --   end,
  -- },
}
